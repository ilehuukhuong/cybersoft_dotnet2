@inject WalletService Wallet
@code {
    private decimal amount;
    private string message = "";

    private void Submit()
    {
        if (amount > 0 && Wallet.Withdraw(amount))
        {
            OnClose.InvokeAsync();
        }
        else
        {
            message = "Insufficient funds!";
        }
    }
}

<div class="modal show d-block">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Withdraw Money</h5>
                <button class="btn-close" @onclick="() => OnClose.InvokeAsync()"></button>
            </div>
            <div class="modal-body">
                <input type="number" @bind="amount" class="form-control" placeholder="Amount" />
                <p style="color: red;">@message</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="() => OnClose.InvokeAsync()">Close</button>
                <button class="btn btn-primary" @onclick="Submit">OK</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
}
